********************************************************************************
		                学习 Emacs
********************************************************************************

		       	      ===============
			         文档说明：
			      ===============

1 版权说明：本笔记的内容是基于《 TUTORIAL.cn 》改编而成的。之所以要写这个文档，我的目的是希望将原文档改写成更简洁、更清晰、更完善便于初学者学习 Emacs 的文档。其中我删掉原文中一些冗长的句子，增加一些必要的命令和解释，并重新布置文档等等。大家可以自由的复制、分享和更改该文档。需要注意的是，我最终的目的是希望大家能够将这个文档不断的完善，例如将文中错误的地方或者写的不清楚的地方加以改正，还可以将你觉得很有必要的内容添加进来。这样不仅能自我提高，也能服务许多 Emacs 的爱好者。这也正是 Emacs 的开源精神所在。若大家要对本文进行更改，请注明要更改的地方，比如第几行做了更改。并将这一更改信息发送到我的邮箱：hoo_ali@aliyun.com。大家发送邮件时的邮件主题统一为： 学习 Emacs。并留下你的姓名。

2 内容说明：本文基于中式键盘所写。
 * 键盘上的字母键 A 到 Z，都将用小写字母代替；
 * C 将代表 Ctrl 键；M 将代表 Alt 键；S 代表 Shift 键；
 * <Tab> 代表 Tab 键；<Return> 代表 Enter 键;
 * Backspace，Delete，Home，End，PageUp，PageDown 以及数字键不变；
 * 空格键记为 Space； 
 * key1-key2 是组合键，代表先按住 key1 键，同时再按住 key2 键；
 * key1-key2-key3 也是组合键涵义同 key1-key2； 
 * key1-key2 key3-key4 是两个连续的组合键，代表先按组合键 key1-key2 ，然后再按组合键key3-key4 。举一个例子：退出 Emacs 的命令是 C-x C-c，即同时按 Ctrl 键和字母键 x，按完后松手，此时可以在 Emacs 窗口的最下面一行（也叫回显区）中可以看到显示 C-x-，再同时按 Ctrl 和字母键 c ，这样你就退出了 Emacs 。
 * 一些需要换档的键的说明，例如本需要按 @ 键，通常我们是写成 S-“2”，即按 Shift 键同时   再按数字键 2。再比如小于号键 <，将被写成 S-“,” 的形式，注意 “,” 是逗号键。
********************************************************************************

===================
*****屏幕的上下移动
--------------------------------------------------------------------------------

执行这样的命令时，请注意光标和屏幕的变换。通常你可以使用键盘上的 PageUp 和 PageDown 键来滚屏。但是如果你不想你的手离开你的主键盘区时，建议使用如下命令：

>> C-v 屏幕切换到到下一屏，光标移动到下一屏首行。值得注意的是，当你从上一屏滚到下一屏时，中间会有两行的重复。这样做是为了保持阅读的连续性。从现在开始，每读完当前一屏你都可以这样做一次。

>> M-v 屏幕切换到上一屏，光标移动到上一屏末行。

>> C-l 重置屏幕，使得光标所在的行为当前屏幕的中间行，光标位置不变。注意不是 C-1 。

===================
*****基本的光标控制
--------------------------------------------------------------------------------

光标在文字中的移动和定位是编写和阅读文档最基本的要求。通常你可以使用键盘上的方向键上下左右去移动光标。当然还是建议你去使用如下命令：

>> C-p 、 C-b 、 C-f 和 C-n 这四个命令的功能和方向键是一样的，如下图所示：

                             上一行 C-p
                                  :
                                  :
            向左移 C-b .... 光标当前位置 .... 向右移 C-f
                                  :
                                  :
                             下一行 C-n
为方便记忆，需知道 p 代表“previous（上一行）”，n 代表“next（下一行）”，b 代表“backward（后退）”，而 f 则代表“forward（前进）”。

>> M-f、 M-b 这两个命令不同于上面的四个命令，它们两被用于一个词一个词地移动，而不是一个字符一个字符地挪光标。M-f 是将光标往前移动一个词，而 M-b 则是往后移。这里的“词”指英文单词，对中文来说，则是指移动到下一个标点符号。其实本质上都是一样的意思，都是移到下一个标点符号因为英文单词是由空格符隔开的。如果光标停在一个词的中间，M-f 会移动到这个词的末尾。如果光标处于词与词之间的空白处，M-f 会移动到下一个词的末尾。M-b 的功能类似，只是方向相反。


>> C-a 、 C-e 和 M-a 、 M-e 这个是光标移动的跨度分别为行和句子。C-a 和 C-e 可以将光标移动到“一行”的头部和尾部；而 M-a 和 M-e 则将光标移动到“一句”的头部和尾部。


>> M-S-“,” 可以将光标移动到本文档的最开头；

>> M-S-“.” 可以将光标移动到本文档的最末尾。

也许细心的你早已发现一个通常的惯例：Alt 系列组合键用来操作“由语言定义的单位（比如词、句子、段落）”，而 Ctrl 系列组合键用来操作“与语言无关的基本单位（比如字符、行等等）”。


下面对简单的光标移动命令做一个小结，对于初学者来说是十分必要的。

>> C-v     移动到下一屏

>> M-v     移动到上一屏

>> C-l     将调整屏幕，将当前行置为当前屏的中间；连按两次则置为当前屏的首行；三次则为当前屏的最后一行

>> C-f     向右移动一个字符

>> C-b     向左移动一个字符

>> M-f     向右移动一个词【对中文是移动到下一个标点符号】

>> M-b     向左移动一个词【对中文是移动到上一个标点符号】

>> C-n     移动到下一行

>> C-p     移动到上一行

>> C-a     移动到行首

>> C-e     移动到行尾

>> M-a     移动到句首

>> M-e     移动到句尾

>> M-S-“,” 可以将光标移动到本文档的最开头；

>> M-S-“.” 可以将光标移动到本文档的最末尾。

=============
*****重复命令
--------------------------------------------------------------------------------
为一个命令指定重复次数的方法是：先输入 C-u，然后输入数字作为参数，最后再输入命令。在下面给出几个例子：

>> C-u 8 C-f 这个命令执行后光标会向前移动 8 个字符。

>> C-u 8 *，这将会插入 ********。

虽然大部分命令把这样的数字参数解释为其重复次数，但是也有些命令例外，它们将数字参数另做它用或者并不是我们所预期的意思。下面给出几个例子：

>> C-u 8 C-v 将屏幕向下滚动 8 行，而不是 8 屏。当然 M-v 也是这样子，当给定它一个参数时，它将滚动你指定的“行数”，而不是“屏数”。

>> C-u 0 C-l 是重置屏幕，使得光标所在行为屏幕的首行。

===========================
*****在 Emacs 失去响应的时候
--------------------------------------------------------------------------------
如果 Emacs 对你的命令失去响应，你可以用按命令 C-g 。 C-g 还可以取消只输入到一半的命令。当然若你不小心按了一下 ESC 键，那么取消 ESC 的正确做法是再连按两次 ESC 。

=================
*****被禁用的命令
--------------------------------------------------------------------------------

有一些 Emacs 命令被“禁用”了，以避免初学者在不了解其确切功能的情况下误用而造成麻烦。如果你用到了一个被禁用的命令，Emacs 会显示一个提示消息，告诉你这个命令到底是干什么的，询问你是否要继续，并在得到你的肯定之后再执行这命令。如果你真的想用这条命令，在 Emacs 询问你的时候应该按空格。一般来说，如果你不想用，就按“n”。例如如下命令：

>> C-x C-l 这是一个被禁用的命令，按下后使用 n 来回答询问。

===============
*****插入与删除
--------------------------------------------------------------------------------
插入文字很简单，光标移动到你要插入文字的地方，直接敲键盘就可以了。你能看到的字符，比如 A、7、* 等等，都被 Emacs 视为文字并且可以直接插入。敲回车键 Enter 键会插入一个换行符。对于删除文字，大家通常使用 Backspace 和 Delete 键。你可以将光标移到你要删除的那个字符后面，按 Backspace 键即可删除那个字符。当然也可以将光标移动到你要删除的那个字符前，按 Delete 键即可删除那个字符。但我希望大家现在使用如下命令：

>> M-w 先选中的你要复制的文字，然后使用这个命令就复制了选中的文字。

>> C-w 先选中的你要剪切的文字，然后使用这个命令就剪切了选中的文字。

>> C-d 删除光标后的一个字符。

>> M-d 移除光标后的一个词。 

>> C-k 移除从光标到“行尾”间的字符。

>> M-k 移除从光标到“句尾”间的字符。

细心的读者会注意到“删除”和“移除”这两个词。其中 d 代表“delete（删除）”，k 代表“kill（移除）”。“删除”和“移除”的区别，不同在于被移除的东西可以找回来，而被删除的就不行了。移除类似于 Windows 操作系统中的“剪切”。一般而言，那些可能消除很多文字的命令会把消除掉的文字记录下来，就像 M-d 虽然使用了字母 d，但本质是移除而不是删除，而那些只消除一个字符或者只消除空白的命令就不会记录被消除的内容。可是上面提到的复制、剪切和移除的内容怎么找回来呢？使用如下命令：

>> C-y 即粘贴回了那些内容。其中 y 代表“yank（召回）”，这个命令类似于 Windows 中的 "粘贴"。

需要说明的是 C-y 只能召回最近一次移除的内容，那如何召回前几次移除的内容呢？它们当然没有丢，可以使用如下命令：
>> M-y 使用这个命令之前一定要先使用一次 C-y 命令。不信你可以试一试。

由于上面提到了选中任意一部分文字，所以在这里提到这样的命令来选中任意一部分文字，这在需要选择很长的文本时很有必要。

>> 首先把光标移动到你想要移除的区域的一端，然后按 C-S-2，再将光标移动到另一端，就选择了这两点键的文字。

==========
*****撤销
--------------------------------------------------------------------------------

撤销操作应该说更普遍。如果你修改了一段文字，又觉得改得不好，那么可以撤销：

>> C-x u 通常 C-x u 会消除一个命令所造成的所有改变，如果你在一行中连续多次地使用，你会把以前的命令也依次撤销。其中 u 代表“undo（撤销）”。你还可以使用命令 C-/ 进行撤销。数字参数对于 C-/ 和 C-x u 的意义是执行撤销的重复次数。

需要注意两个例外：第一是，没有改变文字的命令不算（包括光标移动命令和滚动命令）；第二是，从键盘输入的字符以组为单位――每组 20 个字符――来进行处理。（这是为了减少你在撤销“插入文字”动作时需要输入 C-x u 的次数）。

==========
*****窗格
--------------------------------------------------------------------------------

Emacs 可以有多个窗格，每个窗格显示不同的文字。下面给出一些常用命令介绍。

>> C-x 2 它会将屏幕划分成两个窗格（横向分割）。这两个窗格里显示的都是本文档，而光标则停留在上方的窗格里。

>> C-M-v 向下滚动下方的窗格。

>> C-M-S-v 向上滚动下方的窗格。

>> C-x o 其中“o”是代表“other（其他）”。可以将光标移到其他窗格。连续使用 C-x o 可以遍历所有窗格。每一个窗格都有它自己的光标位置，但是只有一个窗格会真正显示这个光标。其它窗格在控制台下不会显示光标，在图形窗格下缺省显示为镂空光标。

>> C-x 1 除了光标所在的窗格外，其他窗格全部关闭。

>> C-x 3 它会将屏幕划分成两个窗格（纵向分割）。这两个窗格里显示的都是本文档，而光标则停留在左方的窗格里。

>> C-x k 关闭当前窗格。

=========
*****文件操作
--------------------------------------------------------------------------------

有时候我们需要在当前编辑下直接寻找文件：

>> C-x C-f 紧跟着输入一个文件名，再用 <Returm> 键，可以用打开一个新的文件，若你输入的文件不存在，则 Emacs 会自动创建这样的一个个新文件。打开新文件的窗格将覆盖本文档的窗格。若要不覆盖，可以使用下面的命令：

>> C-x 4 C-f 紧跟着输入一个文件名，再用 <Returm> 键，可以在新窗格中打开一个新的文件。

编辑一个文件后该怎么保存呢？

>> C-x C-s 或者 C-x s 然后按照相应的提示操作，比如输入 yes 或 no 之类的。第一次存盘的时候 Emacs 会将原文件重命名以备份。重命名的规则通常是在原文件名之后添加一个“~”字符。若想关掉文件备份可以用如下命令：

>> M-x customize-variable <Return> make-backup-files <Return>

在 Emacs 里面还有一个和 Windows 中的“另存为”类似的命令：

>> C-x C-w 就是将当前编辑的文档另存为... ，而且另存为完毕之后，你会发现你当前编辑的文档成为你另存为的那个文档。这与 Windows 中是一致的。

这里还有一个很有意思的命令：

>> C-x i 然后输入文件名，就可以将你输入的这个文件，插入到光标的位置。

===========
*****缓冲区
--------------------------------------------------------------------------------
我们在用 C-x C-f 命令找到并打开第二个文件时，第一个文件仍然在 Emacs 中。要切回第一个文件，第一种办法是再用一次 C-x C-f 找到并打开第一个文件。这样，你就可以在 Emacs 中同时打开多个文件。其实，Emacs 把每个编辑中的文件都放在一个称为“（buffer）缓冲区”的地方。每寻找到一个文件，Emacs 就在其内部开辟一个缓冲区。用如下命令可以列出当前所有的缓冲区。

>> C-x C-b 

不管存在多少缓冲区，任何时候都只能有一个“当前”缓冲区，也就是你正在编辑的这个。如果你想编辑其它的缓冲区，就必须“切换”过去。上面讲过用命令 C-x C-f 是一种办法。不过还有一个更简单的办法：

>> C-x b。用这条命令后，你必须输入缓冲区的名称。例如输入 C-x b TUTORIAL.cn <Return> 回到这里。大多数情况下，缓冲区与跟其对应的文件是同名的（不包括目录名），不过这也不是绝对的。

用 C-x C-b 得到的缓冲区列表总是显示缓冲区名。你在 Emacs 窗格里看到的“任何”文字都一定属于某个缓冲区。然而，缓冲区未必有对应文件：比如显示缓冲区列表的缓冲区就是这样。再比如“*Messages*”缓冲区也没有对应文件，这个缓冲区里存放的都是在 Emacs 底部出现的消息。可以输入 C-x b *Messages* <Return> 瞅瞅消息缓冲区里都有什么东西。

还有一件事情需要说明，如果你对某个文件做了些修改，然后切换到另一个文件，这个动作并不会帮你把前一个文件存盘。对第一个文件的修改仍然仅存在于 Emacs 中，也就是在它对应的缓冲区里。并且，对第二个文件的修改也不会影响到第一个文件。这很有用，但是也挺麻烦：因为如果你想要存储第一个文件，还需要先 C-x C-f 切换回去再用 C-x C-s 存盘。你需要一个更简便的方法（其实在前面我们已经提到了），就是如下命令：

>> C-x s 该命令保存多个缓冲区。

细心的你也许会发现 C-x 开始的这些命令许多都跟“窗格、文件、缓冲区”等等诸如此类的东西有关。

===============
*****命令集扩展
--------------------------------------------------------------------------------

Emacs 的命令就像天上的星星，数也数不清。把它们都对应到 Ctrl 和 Alt 组合键上显然是不可能的。 Emacs 用扩展命令来解决这个问题，扩展命令有两种风格：

        C-x     字符扩展。  C-x 之后输入另一个字符或者组合键。
        M-x     命令名扩展。M-x 之后输入一个命令名。

很多扩展命令都相当有用，虽然与你已经学过的命令比起来，他们可能不那么常用。我们早已经见过一些扩展命令了，比如用 C-x C-f 寻找文件和用 C-x C-s 保存文件；退出 Emacs 用的 C-x C-c 也是扩展命令。

C-x 的扩展命令有很多，下面列出部分前面已经学过的，你可以把前面学得 C-x 扩展命令都补全来：

>> C-x C-f         寻找文件。

>> C-x C-s         保存文件。

>> C-x s           保存所有缓冲区文件。

>> C-x C-b         列出缓冲区。

>> C-x b           打开指定的缓冲区。

>> C-x C-c         离开 Emacs。

>> C-x 1           关掉其它所有窗格，只保留一个。

>> C-x u           撤销。

M-x 的扩展的命令通常并不常用，或只用在部分模式下。比如 replace-string （字符串替换）这个命令，它会在全文范围内把一个字符串替换成另一个。在输入 M-x 之后， Emacs 会在屏幕底端向你询问并等待你输入命令名。如果你想输入“replace-string”，其实只需要敲“repl s<Tab>”就行了，Emacs 会帮你自动补齐。输入完之后按 <Return> 。字符串替换命令需要两个参数――被替换的字符串和用来替换它的字符串。每个参数的输入都以换行符来结束。下面给出个例子：

>> M-x replace-string<Return>changed<Return>altered<Return>。

   【以下保留一行原文，以应练习之需：】
   Notice how this line has changed: you've replaced... 

请注意上一行内容的变化：在光标之后的范围内，你已经将“changed”这个词――不论它在哪里出现――全部被“altered”替换掉了。

=============
*****自动保存
--------------------------------------------------------------------------------

如果你已经修改了一个文件，但是还没来得及存盘你的计算机就罢工了，那么你所做的修改就很可能会丢失。为了避免这样的不幸发生，Emacs 会定期将正在编辑的文件写入一个“自动保存”文件中。自动保存文件的文件名的头尾各有一个“#”字符，比如你正在编辑的文件叫“hello.c”，那么它的自动保存文件就叫“#hello.c#”。这个文件会在正常存盘之后被 Emacs 删除。所以，假如不幸真的发生了，你大可以从容地打开原来的文件（注意不是自动保存文件）然后输入：

>> M-x recover file<Return> 来恢复你的自动保存文件。在提示确认的时候，输入 yes<Return>。

===========
*****回显区
--------------------------------------------------------------------------------
回显区位于屏幕的最下面一行，也即迷你缓冲区。

===========
*****状态栏
--------------------------------------------------------------------------------
位于回显区正上方的一行被称为“状态栏”。状态栏上会显示一些信息，比如：

--:**  学习Notes.cn       (Fundamental)--L264--67%----------------

状态栏显示了 Emacs 的状态和你正在编辑的文字的一些信息。

你应该知道 MyNotes.cn 的意思吧？我就不说了。

-NN%-- 显示的是光标在全文中的位置。如果位于文件的开头，那么就显示 --Top-- 而不是 --00%--；如果位于文件的末尾，就显示--Bot--。如果文件很小，一屏就足以显示全部内容，那么状态栏会显示 --All--。

“L” 和其后的数字给出了光标所在行的行号。

最开头的星号（*）表示你已经对文字做过改动。刚刚打开的文件肯定没有被改动过，所以状态栏上显示的不是星号而是短线（-）。

状态栏上小括号里的内容告诉你当前正在使用的编辑模式。默认的模式是 Fundamental，就是你现在正在使用的这个。它是一种“主模式”。

Emacs 的主模式有用来编辑程序代码的――比如 Lisp 模式；也有用来编辑各种自然语言文本的――比如 Text 模式。任何情况下只能应用一个主模式，其名称会显示在状态栏上，也就是现在显示“Fundamental”的地方。主模式通常会改变一些命令的行为。比方说，不管编辑什么语言的程序代码，你都可以用一个相同的命令来添加注释。但是在不同的语言中注释的语法往往是不同的，这时不同的主模式就会用各自不同的语法规则来添加注释。主模式都是可以用 M-x 启动的扩展命令，M-x fundamental-mode 就可以切换到 Fundamental模式。编辑自然语言文本应该用 Text 模式。可输入 M-x text mode<Return>。别担心，什么都没变。不过实践一下可以发现，M-f 和 M-b 现在把单引号（'）视为词的一部分了。而在先前的 Fundamental 模式中，M-f 和 M-b 都将单引号视为分隔单词的符号。用 C-h m 命令可以查看当前主模式的文档。

主模式之所以称之为“主（major）”模式，是因为同时还有“辅模式”（minormode）存在。辅模式并不能替代主模式，而是提供一些辅助的功能。每个辅模式都可以独立地开启和关闭，跟其它辅模式无关，跟主模式也无关。所以你可以不使用辅模式，也可以只使用一个或同时使用多个辅模式。

有一个叫做自动折行（Auto Fill）的辅模式很有用，特别是在编辑自然语言文本的时候。启用自动折行后，Emacs 会在你打字超出一行边界时自动替你换行。用 M-x auto fill mode<Return> 启动自动折行模式。再用一次这条命令，自动折行模式会被关闭。也就是说，如果自动折行模式没有被开启，这个命令会开启它；如果已经开启了，这个命令会关闭它。所以我们说，这个命令可以用来“开关（toggle）”模式。你必须敲一些空格，因为 Auto Fill 只在空白处进行断行。输入空格对英文来说是必须的，而对中文则不必。

行边界通常被设定为 70 个字符，这里指英文字符，可以用 C-x f 命令配合数字参数来重新设定它。输入 C-x f 并传递参数 20： C-u 2 0 C-x f ，然后输入一些文字，观察 Emacs 的自动折行动作。最后再用 C-x f 将边界设回 70。值得注意的是，如果你在段落的中间做了一些修改，那么自动折行模式不会替你把整个段落重新折行，你需要用 M-q 手动折行。注意，光标必须位于你需要折行的那一段里。

=========
*****搜索
--------------------------------------------------------------------------------

Emacs 可以向前或向后搜索字符串。

>> C-s 是向前搜索（也即光标之后的文档）。在按下 C-s 之后，回显区里会有“I-search”字样出现，表明目前Emacs 正处于“渐进搜索”状态，并等待你输入搜索字串。输入字符串后，按 <Return> 可以结束搜索。输入 C-s 开始一个搜索。输入“Emacs”这个词，每敲一个字都停顿一下并观察光标。现在你应该已曾经找到“Emacs”这个词了。再按一次 C-s，搜索下一个“Emacs”出现的位置。敲 <Return> 结束搜索。看仔细了么？在一次渐进式搜索中，Emacs 会尝试跳到搜索目标出现的位置。要跳到下一个命中位置，就再按一次 C-s。如果找不到目标，Emacs 会发出“哔”的一声，告诉你搜索失败。在整个过程中，都可以用 C-g 来终止搜索。你会发现C-g 会让光标回到搜索开始的位置，而 <Return> 则让光标留在搜索结果上，这是很有用的功能。


>> C-r 是向后搜索（光标之前的文档）。C-r 与 C-s相比除了搜索方向相反之外，其余的操作都一样。

另外需说明的是，如果你在搜索的时候输入了Ctrl 或者 Alt 组合键的话，搜索可能会结束。（也有例外，比如 C-s 和 c-r 这些用于搜索的命令。）

=============
*****递归编辑（这里我没有弄明白）
--------------------------------------------------------------------------------

有时候你会进入所谓的“递归编辑”。递归编辑状态由位于状态栏的方括号所指示，其中包含了用小括号来指明的模式名称。比如说，你有时可能会看到 [(Fundamental)] ，而不是(Fundamental) 。比如在用 M-S-5 进行交互式替换的时候你又用了 C-s 进行搜索，这时替换模式并没有结束，但你又进入了搜索模式，这就是所谓的递归编辑。

离开递归编辑可以用 ESC ESC ESC。这是一个最通用的“离开”命令，你甚至可以使用它来关掉多余的窗格，或者离开小缓冲。你不能用 C-g 退出递归编辑，因为 C-g 的作用是取消“本层递归编辑之内”的命令和其参数。

==================
*****获得更多帮助
--------------------------------------------------------------------------------

本快速指南的目的仅仅是帮助你在 Emacs 的海洋里下水时，不至于束手无策望洋兴叹。有关 Emacs 的话题可谓九牛一毛，这里就需要大家通过进一步学习，同时回过头来不断的完善本文档。

为了进一步学习，Emacs 提供了一些命令来查看 Emacs 的命令文档，这些命令都以 C-h 开头，这个字符也因此被称为“（Help）帮助”字符。要使用帮助功能，请先输入 C-h，然后再输入一个字符以说明你需要什么帮助。如果你连自己到底需要什么帮助都不知道，那么就输入：

>> C-h ? 这样 Emacs 会告诉你它能提供了哪些帮助。

需要说明有些主机改变了 C-h 的意义，这种以己度人外加一刀切的做法确实不太好，不过倒是让你可以义正辞严地抱怨他们的系统管理员。话又说回来，如果你按 C-h 之后没有任何帮助信息显示出来，那么试试命令 M-x help <Return> 。

下面介绍几个最基本的帮助功能
>> C-h c 输入 C-h c 之后再输入一个组合键，Emacs 会给出这个命令的简要说明，会显示相应命令对应的函数名。

>> C-h k 输入 C-h k 之后再输入一个组合键，就会给出这个命令更多的信息，Emacs 会新打开一个窗格以显示相应的文档。

>> C-h f 再输入函数名，解释一个函数。

>> C-h v 再输入变量的名称，用来显示 Emacs 变量的文档。Emacs 变量可以被用来“定制 Emacs 的行为”。

>> C-h a 用于相关命令搜索。输入一个关键词然后 Emacs 会列出所有命令名中包含此关键词的命令。这些命令全都可以用 M-x 来启动。对于某些命令来说，相关命令搜索还会列出一两个组合键。例如输入 C-h a file<Return>，Emacs 会在另一个窗格里显示一个 M-x 命令列表，这个列表包含了所有名称中含有“file”的命令。你可以看到像“C-x C-f”这样的组合键显示在“find-file”这样的命令名的旁边。

>>  C-h i 阅读联机手册（也就是通常讲的 Info）。这个命令会打开一个称为“*info*”的特殊缓冲区，在那里，你可以阅读安装在系统里的软件包使用手册。要读 Emacs 的使用手册，按 memacs <Return> 就可以了。如果你之前从没用过 Info 系统，那么请按“?”，Emacs 会带你进入 Info 的使用指南。在看完本快速指南之后，Emacs Info 会成为你的主要参考文档。

==============
*****更多精彩
--------------------------------------------------------------------------------

最后在提两个要点：

Completion 可以替你节省不必要的键盘输入。比如说你想切换到 *Message* 缓冲区，你就可以用 C-x b *M<Tab> 来完成。只要 Emacs 能够根据你已经输入的文字确定你想要输入的内容，它就会自动帮你补齐。

Dired 方便文件处理。能够在一个缓冲区里列出一个目录下的所有文件（可以选择是否也列出子目录），然后你可以在这个文件列表上完成对文件的移动、访问、重命名或删除等等操作。Dired 也在 Emacs Info 中有详细介绍，参见“Dired”一节。


想学习更多的使用技巧可阅读 Emacs 使用手册，即 GNU Emacs manual。可以到官方网站去下载：
            
              -------------------------------------------- 
               http://www.gnu.org/software/emacs/#Manuals
              --------------------------------------------

==============
*****后记
--------------------------------------------------------------------------------

这一部分是在后面使用 Emacs 中遇到了一些相应的问题时记录下来的。

----------------
关于 Emacs 编码的问题
----------------
先使用 M-x 键，然后分别输入以下命令执行各个功能：

>> describe-coding-system 查看当前用于解读文件的编码。

>> prefer-coding-system 设置读文件时编码选择优先级。

>> revert-buffer-with-coding-system 用指定的编码格式重读文件 (打完命令，按两下tab，可以显示所有支持的编码格式)。
